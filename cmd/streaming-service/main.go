package main

import (
	"bytes"
	"crypto/sha256"
	"encoding/json"
	"fmt"
	"io"

	//    "io"
	"log"
	"net"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"sync"
	"time"
)

type StreamRequest struct {
	StreamID string `json:"stream_id"`
	Action   string `json:"action"` // start, stop, status
}

type StreamResponse struct {
	Message  string      `json:"message"`
	StreamID string      `json:"stream_id,omitempty"`
	Status   string      `json:"status,omitempty"`
	Data     interface{} `json:"data,omitempty"`
	Error    string      `json:"error,omitempty"`
}

type StreamInstance struct {
	StreamID    string     `json:"stream_id"`
	Status      string     `json:"status"` // starting, running, stopped, error
	StartTime   time.Time  `json:"start_time"`
	StreamStart *time.Time `json:"stream_start,omitempty"` // –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ—Ç–æ–∫–∞
	Process     *exec.Cmd  `json:"-"`
	LogFile     string     `json:"log_file"`
	HLSPath     string     `json:"hls_path"`
	SRTPort     int        `json:"srt_port"`
	ServerIP    string     `json:"server_ip"`
}

type StreamManager struct {
	streams  map[string]*StreamInstance
	mutex    sync.RWMutex
	basePort int
}

// ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
type StatusUpdateRequest struct {
	StreamID string `json:"stream_id"`
	Status   string `json:"status"`
}

// ‚úÖ –ù–û–í–´–ï –°–¢–†–£–ö–¢–£–†–´ –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
type StreamInfo struct {
	ID           uint   `json:"id"`
	StreamID     string `json:"stream_id"`
	Name         string `json:"name"`
	StreamStatus string `json:"stream_status"`
}

// ‚úÖ –î–û–ë–ê–í–¨–¢–ï –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
type StreamInstanceResponse struct {
	StreamID  string    `json:"stream_id"`
	Status    string    `json:"status"`
	StartTime time.Time `json:"start_time"`
	SRTPort   int       `json:"srt_port"`
	ServerIP  string    `json:"server_ip"`
	SRTURL    string    `json:"srt_url"`
	HLSURL    string    `json:"hls_url"`
}

type TasksResponse struct {
	Message string       `json:"message"`
	Data    []StreamInfo `json:"data"`
}

var manager *StreamManager

func main() {
	// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
	if err := os.MkdirAll("/app/hls", 0o755); err != nil {
		log.Printf("Error creating hls directory: %v", err)
	}
	if err := os.MkdirAll("/app/logs", 0o755); err != nil {
		log.Printf("Error creating logs directory: %v", err)
	}

	manager = &StreamManager{
		streams:  make(map[string]*StreamInstance),
		basePort: 10000,
	}

	// ‚úÖ –ù–û–í–û–ï: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
	go func() {
		time.Sleep(5 * time.Second) // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
		restoreActiveStreams()
	}()

	// API endpoints
	http.HandleFunc("/api/streams", handleStreams)
	http.HandleFunc("/api/streams/", handleStreamByID)
	http.HandleFunc("/api/health", handleHealth)
	http.HandleFunc("/api/debug/", handlePlaylistDebug)
	http.HandleFunc("/api/hls/", handleHLSMetadata) // ‚úÖ –ù–û–í–´–ô endpoint –¥–ª—è HLS –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
	// Serve HLS files
	//http.Handle("/hls/", http.StripPrefix("/hls/", http.FileServer(http.Dir("/app/hls"))))

	log.Println("Streaming service –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É :8081")
	log.Fatal(http.ListenAndServe(":8081", nil))
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ HLS –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
func monitorHLSActivity(streamID string, hlsPath string) {
	log.Printf("üìÅ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ HLS –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ—Ç–æ–∫–∞ %s", streamID)

	ticker := time.NewTicker(2 * time.Second)
	defer ticker.Stop()

	lastModTime := time.Time{}
	consecutiveInactiveChecks := 0
	const maxInactiveChecks = 5 // 10 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

	for range ticker.C {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ç–æ–∫ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		manager.mutex.RLock()
		stream, exists := manager.streams[streamID]
		manager.mutex.RUnlock()

		if !exists {
			log.Printf("üõë –ü–æ—Ç–æ–∫ %s —É–¥–∞–ª–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ HLS", streamID)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ù–û–í–ï–ô–®–ò–• —Å–µ–≥–º–µ–Ω—Ç–∞—Ö
		entries, err := os.ReadDir(hlsPath)
		if err != nil {
			consecutiveInactiveChecks++
			continue
		}

		newestModTime := time.Time{}

		for _, entry := range entries {
			if strings.HasSuffix(entry.Name(), ".ts") {
				if info, err := entry.Info(); err == nil {
					if info.ModTime().After(newestModTime) {
						newestModTime = info.ModTime()
					}
				}
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ù–û–í–ê–Ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
		hasNewActivity := false
		if !newestModTime.IsZero() && newestModTime.After(lastModTime) {
			hasNewActivity = true
			lastModTime = newestModTime
			consecutiveInactiveChecks = 0
			log.Printf("üîÑ –ù–æ–≤–∞—è HLS –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ—Ç–æ–∫–∞ %s (–≤—Ä–µ–º—è: %s)", streamID, newestModTime.Format("15:04:05"))
		} else if !newestModTime.IsZero() {
			// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã, –Ω–æ –Ω–µ—Ç –Ω–æ–≤—ã—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å
			timeSinceLastMod := time.Since(newestModTime)
			if timeSinceLastMod > 10*time.Second {
				consecutiveInactiveChecks++
			} else {
				consecutiveInactiveChecks = 0
			}
		} else {
			consecutiveInactiveChecks++
		}

		manager.mutex.Lock()

		// –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ starting -> running (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ù–û–í–û–ô –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
		if hasNewActivity && stream.Status == "starting" {
			now := time.Now()
			stream.StreamStart = &now
			stream.Status = "running"
			log.Printf("üé¨ –ù–æ–≤—ã–µ HLS —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Ç–æ–∫–∞ %s, —Å—Ç–∞—Ç—É—Å: running", streamID)
			// ‚úÖ –î–û–ë–ê–í–ò–¢–¨ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
			go notifyMainApp(streamID, "running")
		}

		// –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ running -> starting (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
		if consecutiveInactiveChecks >= maxInactiveChecks && stream.Status == "running" {
			stream.Status = "starting"
			stream.StreamStart = nil
			log.Printf("‚èπÔ∏è  –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å HLS –¥–ª—è –ø–æ—Ç–æ–∫–∞ %s (%d –ø—Ä–æ–≤–µ—Ä–æ–∫), —Å—Ç–∞—Ç—É—Å: starting", streamID, consecutiveInactiveChecks)
			consecutiveInactiveChecks = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

			// ‚úÖ –î–û–ë–ê–í–ò–¢–¨ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
			go notifyMainApp(streamID, "starting")
		}

		manager.mutex.Unlock()
	}
}

func handleHealth(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	manager.mutex.RLock()
	totalStreams := len(manager.streams)
	runningStreams := 0
	for _, stream := range manager.streams {
		if stream.Status == "running" {
			runningStreams++
		}
	}
	manager.mutex.RUnlock()

	response := StreamResponse{
		Message: "Streaming service —Ä–∞–±–æ—Ç–∞–µ—Ç",
		Data: map[string]interface{}{
			"timestamp":       time.Now(),
			"total_streams":   totalStreams,
			"running_streams": runningStreams,
			"hls_path":        "/app/hls",
		},
	}

	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("Error encoding JSON: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}
}

func handleStreams(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	switch r.Method {
	case "GET":
		manager.mutex.RLock()
		streams := make([]*StreamInstance, 0, len(manager.streams))
		for _, stream := range manager.streams {
			streams = append(streams, stream)
		}
		manager.mutex.RUnlock()

		response := StreamResponse{
			Message: fmt.Sprintf("–ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–æ–∫–æ–≤: %d", len(streams)),
			Data:    streams,
		}
		if err := json.NewEncoder(w).Encode(response); err != nil {
			log.Printf("Error encoding JSON: %v", err)
			http.Error(w, "Internal server error", http.StatusInternalServerError)
			return
		}

	case "POST":
		var req StreamRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			response := StreamResponse{
				Message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö",
				Error:   err.Error(),
			}
			w.WriteHeader(http.StatusBadRequest)
			if err := json.NewEncoder(w).Encode(response); err != nil {
				log.Printf("Error encoding JSON: %v", err)
				http.Error(w, "Internal server error", http.StatusInternalServerError)
				return
			}
			return
		}

		switch req.Action {
		case "start":
			response := startStream(req.StreamID)
			if response.Error != "" {
				w.WriteHeader(http.StatusInternalServerError)
			}
			if err := json.NewEncoder(w).Encode(response); err != nil {
				log.Printf("Error encoding JSON: %v", err)
				http.Error(w, "Internal server error", http.StatusInternalServerError)
				return
			}

		case "stop":
			response := stopStream(req.StreamID)
			if response.Error != "" {
				w.WriteHeader(http.StatusInternalServerError)
			}
			if err := json.NewEncoder(w).Encode(response); err != nil {
				log.Printf("Error encoding JSON: %v", err)
				http.Error(w, "Internal server error", http.StatusInternalServerError)
				return
			}

		default:
			response := StreamResponse{
				Message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
				Error:   "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: start, stop",
			}
			w.WriteHeader(http.StatusBadRequest)
			if err := json.NewEncoder(w).Encode(response); err != nil {
				log.Printf("Error encoding JSON: %v", err)
				http.Error(w, "Internal server error", http.StatusInternalServerError)
				return
			}
		}

	default:
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
	}
}

func handleStreamByID(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	streamID := strings.TrimPrefix(r.URL.Path, "/api/streams/")
	if streamID == "" {
		response := StreamResponse{
			Message: "–ù–µ —É–∫–∞–∑–∞–Ω StreamID",
			Error:   "StreamID is required",
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}

	manager.mutex.RLock()
	stream, exists := manager.streams[streamID]
	manager.mutex.RUnlock()

	if !exists {
		response := StreamResponse{
			Message: "–ü–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
			Error:   "Stream not found",
		}
		w.WriteHeader(http.StatusNotFound)
		json.NewEncoder(w).Encode(response)
		return
	}

	serverIP := getServerIP()

	// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º CDN –¥–æ–º–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	cdnDomain := os.Getenv("CDN_DOMAIN")
	if cdnDomain == "" {
		cdnDomain = serverIP
	}

	// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç–æ–∫–µ —Å CDN URLs
	streamData := map[string]interface{}{
		"stream_id":  streamID,
		"status":     stream.Status,
		"start_time": stream.StartTime,
		"srt_port":   stream.SRTPort,
		"server_ip":  serverIP,
		"hls_path":   stream.HLSPath,
		"log_file":   stream.LogFile,
		"mode":       "repack_only",

		// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï URL —á–µ—Ä–µ–∑ CDN/nginx
		"srt_url": fmt.Sprintf("srt://%s:%d?mode=caller&transtype=live&streamid=%s", serverIP, stream.SRTPort, streamID),
		"hls_url": fmt.Sprintf("https://%s/hls/%s/playlist.m3u8", cdnDomain, streamID),
		"hls_api": fmt.Sprintf("http://%s:8081/api/hls/%s", serverIP, streamID),

		"description": "–ü–æ—Ç–æ–∫ –ø–µ—Ä–µ–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ CDN",
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –ø–æ—Ç–æ–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
	if stream.StreamStart != nil {
		streamData["stream_start"] = *stream.StreamStart
		streamData["stream_duration"] = time.Since(*stream.StreamStart).String()
	}

	response := StreamResponse{
		Message:  "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç–æ–∫–µ",
		StreamID: streamID,
		Status:   stream.Status,
		Data:     streamData,
	}

	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

// ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –ø–µ—Ä–µ–¥ func main():
func handleHLSMetadata(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Cache-Control", "no-cache")

	streamID := strings.TrimPrefix(r.URL.Path, "/api/hls/")
	if streamID == "" {
		response := StreamResponse{
			Message: "StreamID required",
			Error:   "streamId parameter is missing",
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}

	manager.mutex.RLock()
	stream, exists := manager.streams[streamID]
	manager.mutex.RUnlock()

	if !exists {
		response := StreamResponse{
			Message: "Stream not found",
			Error:   "Stream not found or not active",
		}
		w.WriteHeader(http.StatusNotFound)
		json.NewEncoder(w).Encode(response)
		return
	}

	cdnDomain := os.Getenv("CDN_DOMAIN")
	if cdnDomain == "" {
		cdnDomain = getServerIP()
	}

	accessToken := generateStreamToken(streamID)

	response := StreamResponse{
		Message:  "HLS stream metadata",
		StreamID: streamID,
		Status:   stream.Status,
		Data: map[string]interface{}{
			"hls_url":      fmt.Sprintf("https://%s/hls/%s/playlist.m3u8", cdnDomain, streamID),
			"stream_url":   fmt.Sprintf("https://%s/hls/%s/playlist.m3u8?token=%s", cdnDomain, streamID, accessToken),
			"stream_id":    streamID,
			"status":       stream.Status,
			"start_time":   stream.StartTime,
			"cdn_domain":   cdnDomain,
			"access_token": accessToken,
		},
	}

	if stream.StreamStart != nil {
		response.Data.(map[string]interface{})["stream_start"] = *stream.StreamStart
		response.Data.(map[string]interface{})["is_live"] = true
	} else {
		response.Data.(map[string]interface{})["is_live"] = false
	}

	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

func generateStreamToken(streamID string) string {
	timestamp := time.Now().Unix()
	tokenData := fmt.Sprintf("%s:%d", streamID, timestamp)

	secret := os.Getenv("STREAM_TOKEN_SECRET")
	if secret == "" {
		secret = "default-secret-change-in-production"
	}

	return fmt.Sprintf("%x", sha256.Sum256([]byte(tokenData+secret)))[:16]
}

func createWrapperScript(streamID string, port int, hlsPath string) (string, error) {
	scriptPath := filepath.Join("/tmp", fmt.Sprintf("ffmpeg_wrapper_%s.sh", streamID))

	script := fmt.Sprintf(`#!/bin/bash
STREAM_ID="%s"
SRT_PORT=%d
HLS_PATH="%s"
LOG_FILE="/app/logs/%s.log"

echo "$(date): üöÄ –ó–∞–ø—É—Å–∫ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ wrapper –¥–ª—è –ø–æ—Ç–æ–∫–∞ $STREAM_ID" >> "$LOG_FILE"

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ—É–Ω–∫—Ü–∏–∏ –≤ bash
cleanup() {
    echo "$(date): üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞ $STREAM_ID" >> "$LOG_FILE"
    if [ ! -z "$FFMPEG_PID" ]; then
        kill -TERM "$FFMPEG_PID" 2>/dev/null
        wait "$FFMPEG_PID" 2>/dev/null
    fi
    exit 0
}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
trap cleanup TERM INT QUIT

# ‚úÖ –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ: –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ ffmpeg
RESTART_COUNT=0
while true; do
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    if [ -f "/tmp/stop_$STREAM_ID" ]; then
        echo "$(date): üî¥ –ü–æ–ª—É—á–µ–Ω —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –ø–æ—Ç–æ–∫–∞ $STREAM_ID" >> "$LOG_FILE"
        rm -f "/tmp/stop_$STREAM_ID"
        break
    fi
    
    RESTART_COUNT=$((RESTART_COUNT + 1))
    echo "$(date): üîÑ –ó–∞–ø—É—Å–∫ FFmpeg –¥–ª—è –ø–æ—Ç–æ–∫–∞ $STREAM_ID –Ω–∞ –ø–æ—Ä—Ç—É $SRT_PORT (–ø–æ–ø—ã—Ç–∫–∞ #$RESTART_COUNT)" >> "$LOG_FILE"
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ reconnect –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –¥–æ–±–∞–≤–∏–ª & –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    ffmpeg \
        -hide_banner \
        -loglevel warning \
        -f mpegts \
        -timeout 10000000 \
        -i "srt://0.0.0.0:$SRT_PORT?mode=listener&transtype=live&streamid=$STREAM_ID&latency=2000000&rcvbuf=100000000&sndbuf=100000000" \
        -c:v copy \
        -c:a copy \
        -avoid_negative_ts make_zero \
        -copyts \
        -start_at_zero \
        -f hls \
        -hls_time 4 \
        -hls_list_size 6 \
        -hls_delete_threshold 1 \
        -hls_flags delete_segments+append_list+omit_endlist \
        -hls_segment_type mpegts \
        -hls_segment_filename "$HLS_PATH/segment_%%03d.ts" \
        "$HLS_PATH/playlist.m3u8" \
        >> "$LOG_FILE" 2>&1 &
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞ FFmpeg
    FFMPEG_PID=$!
    echo "$(date): üìä FFmpeg –∑–∞–ø—É—â–µ–Ω —Å PID $FFMPEG_PID" >> "$LOG_FILE"
    
    # ‚úÖ –ú–û–ù–ò–¢–û–†–ò–ù–ì: –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ffmpeg
    while kill -0 "$FFMPEG_PID" 2>/dev/null; do
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        if [ -f "/tmp/stop_$STREAM_ID" ]; then
            echo "$(date): ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —Ñ–ª–∞–≥—É, –∑–∞–≤–µ—Ä—à–∞–µ–º FFmpeg PID $FFMPEG_PID" >> "$LOG_FILE"
            kill -TERM "$FFMPEG_PID" 2>/dev/null
            wait "$FFMPEG_PID" 2>/dev/null
            rm -f "/tmp/stop_$STREAM_ID"
            exit 0
        fi
        sleep 1
    done
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    wait "$FFMPEG_PID" 2>/dev/null
    EXIT_CODE=$?
    
    # ‚úÖ –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù–´ –ó–ê–í–ï–†–®–ï–ù–ò–Ø
    case $EXIT_CODE in
        0)
            echo "$(date): ‚úÖ FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–∫–æ–¥ $EXIT_CODE)" >> "$LOG_FILE"
            sleep 2
            ;;
        1)
            echo "$(date): üîå FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∏–∑-–∑–∞ EOF/–ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–∫–æ–¥ $EXIT_CODE)" >> "$LOG_FILE"
            echo "$(date): ‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É" >> "$LOG_FILE"
            sleep 1
            ;;
        255)
            echo "$(date): üì° FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏ (–∫–æ–¥ $EXIT_CODE)" >> "$LOG_FILE"
            sleep 2
            ;;
        *)
            echo "$(date): ‚ùå FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π $EXIT_CODE" >> "$LOG_FILE"
            sleep 5
            ;;
    esac
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ã—Å—Ç—Ä—ã—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
    if [ $RESTART_COUNT -gt 50 ]; then
        echo "$(date): ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É" >> "$LOG_FILE"
        sleep 30
        RESTART_COUNT=0
    fi
done

echo "$(date): üèÅ Wrapper –¥–ª—è –ø–æ—Ç–æ–∫–∞ $STREAM_ID –∑–∞–≤–µ—Ä—à–µ–Ω (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: $RESTART_COUNT)" >> "$LOG_FILE"
`, streamID, port, hlsPath, streamID)

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤ —Ñ–∞–π–ª
	err := os.WriteFile(scriptPath, []byte(script), 0755)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å wrapper-—Å–∫—Ä–∏–ø—Ç: %v", err)
	}

	log.Printf("‚úÖ –°–æ–∑–¥–∞–Ω —É—Å—Ç–æ–π—á–∏–≤—ã–π wrapper-—Å–∫—Ä–∏–ø—Ç: %s", scriptPath)
	return scriptPath, nil
}

// –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è startStream —Å –Ω–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–æ–π —Å—Ç–∞—Ç—É—Å–æ–≤
func startStream(streamID string) StreamResponse {
	manager.mutex.Lock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ—Ç–æ–∫
	if _, exists := manager.streams[streamID]; exists {
		manager.mutex.Unlock()
		return StreamResponse{
			Message: "–ü–æ—Ç–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω",
			Error:   "Stream already running",
		}
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç
	port := manager.basePort
	manager.basePort++

	manager.mutex.Unlock()

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	hlsPath := filepath.Join("/app/hls", streamID)
	err := os.MkdirAll(hlsPath, 0755)
	if err != nil {
		return StreamResponse{
			Message: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ HLS",
			Error:   err.Error(),
		}
	}
	// ‚úÖ –î–û–ë–ê–í–ò–¢–¨: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ starting
	go notifyMainApp(streamID, "starting")

	// –°–æ–∑–¥–∞–µ–º wrapper-—Å–∫—Ä–∏–ø—Ç
	scriptPath, err := createWrapperScript(streamID, port, hlsPath)
	if err != nil {
		return StreamResponse{
			Message: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è wrapper-—Å–∫—Ä–∏–ø—Ç–∞",
			Error:   err.Error(),
		}
	}

	// –°–æ–∑–¥–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª
	logFile := fmt.Sprintf("/app/logs/%s.log", streamID)
	logFileHandle, err := os.Create(logFile)
	if err != nil {
		return StreamResponse{
			Message: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞",
			Error:   err.Error(),
		}
	}
	defer logFileHandle.Close()

	// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º wrapper-—Å–∫—Ä–∏–ø—Ç –∏ –ù–ï –ñ–î–ï–ú –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	cmd := exec.Command("bash", scriptPath)
	cmd.Stdout = logFileHandle
	cmd.Stderr = logFileHandle

	log.Printf("–ó–∞–ø—É—Å–∫ wrapper-—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–ø–∞–∫–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ %s: %s", streamID, scriptPath)

	// ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ –∏ –ù–ï –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	err = cmd.Start()
	if err != nil {
		return StreamResponse{
			Message: "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ wrapper-—Å–∫—Ä–∏–ø—Ç–∞",
			Error:   err.Error(),
		}
	}

	serverIP := os.Getenv("SERVER_IP")
	if serverIP == "" {
		serverIP = "localhost"
	}

	// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Ç–æ–∫–∞
	stream := &StreamInstance{
		StreamID:    streamID,
		Status:      "starting",
		StartTime:   time.Now(),
		StreamStart: nil,
		Process:     cmd, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
		LogFile:     logFile,
		HLSPath:     hlsPath,
		SRTPort:     port,
		ServerIP:    serverIP,
	}

	manager.mutex.Lock()
	manager.streams[streamID] = stream
	manager.mutex.Unlock()

	// ‚úÖ –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ, –∫–æ—Ç–æ—Ä–∞—è –ù–ï –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
	go func() {
		// –ó–∞–ø—É—Å–∫–∞–µ–º HLS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
		go monitorHLSActivity(streamID, hlsPath)

		log.Printf("üöÄ –ü–æ—Ç–æ–∫ %s –∑–∞–ø—É—â–µ–Ω —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω", streamID)

		// ‚úÖ –ù–ï –í–´–ó–´–í–ê–ï–ú cmd.Wait() - wrapper —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –≤ —Ñ–æ–Ω–µ
		// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ stopStream

	}()

	return StreamResponse{
		Message:  "–ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω",
		StreamID: streamID,
		Status:   "starting",
		Data: StreamInstanceResponse{
			StreamID:  streamID,
			Status:    "starting",
			StartTime: stream.StartTime,
			SRTPort:   port,
			ServerIP:  serverIP,
			SRTURL:    fmt.Sprintf("srt://%s:%d?streamid=%s", serverIP, port, streamID),
			HLSURL:    fmt.Sprintf("http://%s:8081/hls/%s/playlist.m3u8", serverIP, streamID),
		},
	}
}

func stopStream(streamID string) StreamResponse {
	manager.mutex.Lock()

	stream, exists := manager.streams[streamID]
	if !exists {
		manager.mutex.Unlock()
		return StreamResponse{
			Message: "–ü–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
			Error:   "Stream not found",
		}
	}

	log.Printf("üõë –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ—Ç–æ–∫–∞ %s", streamID)
	manager.mutex.Unlock()

	// ‚úÖ –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ñ–ª–∞–≥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ wrapper-—Å–∫—Ä–∏–ø—Ç–∞
	stopFlagFile := fmt.Sprintf("/tmp/stop_%s", streamID)
	err := os.WriteFile(stopFlagFile, []byte("stop"), 0644)
	if err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: %v", err)
	}

	// ‚úÖ –î–∞–µ–º –≤—Ä–µ–º—è wrapper-—Å–∫—Ä–∏–ø—Ç—É –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
	time.Sleep(2 * time.Second)

	// ‚úÖ –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
	if stream.Process != nil && stream.Process.ProcessState == nil {
		log.Printf("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø–æ—Ç–æ–∫–∞ %s", streamID)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGTERM
		err = stream.Process.Process.Signal(os.Interrupt)
		if err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SIGTERM: %v", err)
		}

		// –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
		done := make(chan error, 1)
		go func() {
			done <- stream.Process.Wait()
		}()

		select {
		case <-done:
			log.Printf("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø–æ—Ç–æ–∫–∞ %s –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", streamID)
		case <-time.After(5 * time.Second):
			log.Printf("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø–æ—Ç–æ–∫–∞ %s", streamID)
			stream.Process.Process.Kill()
		}
	}

	// ‚úÖ –û—á–∏—â–∞–µ–º HLS —Ñ–∞–π–ª—ã
	if stream.HLSPath != "" {
		log.Printf("üßπ –û—á–∏—Å—Ç–∫–∞ HLS —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ—Ç–æ–∫–∞ %s: %s", streamID, stream.HLSPath)
		os.RemoveAll(stream.HLSPath)
	}

	// –£–¥–∞–ª—è–µ–º wrapper-—Å–∫—Ä–∏–ø—Ç
	scriptPath := filepath.Join("/tmp", fmt.Sprintf("ffmpeg_wrapper_%s.sh", streamID))
	os.Remove(scriptPath)

	// ‚úÖ –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
	os.Remove(stopFlagFile)

	// ‚úÖ –£–¥–∞–ª—è–µ–º –ø–æ—Ç–æ–∫ –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	manager.mutex.Lock()
	delete(manager.streams, streamID)
	manager.mutex.Unlock()

	log.Printf("‚úÖ –ü–æ—Ç–æ–∫ %s –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—á–∏—â–µ–Ω", streamID)

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	go notifyMainApp(streamID, "stopped")

	return StreamResponse{
		Message:  "–ü–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
		StreamID: streamID,
		Status:   "stopped",
	}
}

func handlePlaylistDebug(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	streamID := strings.TrimPrefix(r.URL.Path, "/api/debug/")
	if streamID == "" {
		http.Error(w, "StreamID required", http.StatusBadRequest)
		return
	}

	manager.mutex.RLock()
	stream, exists := manager.streams[streamID]
	manager.mutex.RUnlock()

	if !exists {
		http.Error(w, "Stream not found", http.StatusNotFound)
		return
	}

	// –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
	playlists := make(map[string]string)
	playlistPath := filepath.Join(stream.HLSPath, "playlist.m3u8")

	if content, err := os.ReadFile(playlistPath); err == nil {
		playlists["playlist.m3u8"] = string(content)
	} else {
		playlists["playlist.m3u8"] = fmt.Sprintf("Error reading file: %v", err)
	}

	// –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
	var segments []string
	if entries, err := os.ReadDir(stream.HLSPath); err == nil {
		for _, entry := range entries {
			if strings.HasSuffix(entry.Name(), ".ts") {
				segments = append(segments, entry.Name())
			}
		}
	}

	response := map[string]interface{}{
		"stream_id":   streamID,
		"status":      stream.Status,
		"mode":        "repack_only",
		"playlists":   playlists,
		"segments":    segments,
		"hls_path":    stream.HLSPath,
		"start_time":  stream.StartTime,
		"description": "–ü–æ—Ç–æ–∫ –ø–µ—Ä–µ–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è",
	}

	if stream.StreamStart != nil {
		response["stream_start"] = *stream.StreamStart
		response["stream_duration"] = time.Since(*stream.StreamStart).String()
	}

	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("Error encoding JSON: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}
}

func getServerIP() string {
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
	if serverIP := os.Getenv("SERVER_IP"); serverIP != "" {
		return serverIP
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
	conn, err := net.Dial("udp", "8.8.8.8:80")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP: %v, –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost", err)
		return "localhost"
	}
	defer conn.Close()

	localAddr := conn.LocalAddr().(*net.UDPAddr)
	return localAddr.IP.String()
}

// ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é webhook
func notifyMainApp(streamID, status string) {
	mainAppURL := os.Getenv("MAIN_APP_URL")
	if mainAppURL == "" {
		mainAppURL = "http://go-app:8080"
	}

	updateURL := fmt.Sprintf("%s/api/internal/stream-status", mainAppURL)

	requestBody := StatusUpdateRequest{
		StreamID: streamID,
		Status:   status,
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		log.Printf("‚ùå Failed to marshal webhook data: %v", err)
		return
	}

	// ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú RETRY-–õ–û–ì–ò–ö–£
	maxRetries := 3
	client := &http.Client{Timeout: 5 * time.Second}

	for attempt := 1; attempt <= maxRetries; attempt++ {
		log.Printf("üì° Webhook attempt %d/%d: %s -> %s", attempt, maxRetries, streamID, status)

		resp, err := client.Post(updateURL, "application/json", bytes.NewBuffer(jsonData))
		if err != nil {
			log.Printf("‚ùå Webhook attempt %d failed: %v", attempt, err)
			if attempt < maxRetries {
				time.Sleep(time.Duration(attempt) * 2 * time.Second)
				continue
			}
			return
		}
		defer resp.Body.Close()

		responseBody, _ := io.ReadAll(resp.Body)

		if resp.StatusCode == 200 {
			log.Printf("‚úÖ Webhook success on attempt %d: %s", attempt, string(responseBody))
			return
		} else {
			log.Printf("‚ùå Webhook attempt %d failed with status %d: %s", attempt, resp.StatusCode, string(responseBody))
			if attempt < maxRetries {
				time.Sleep(time.Duration(attempt) * 2 * time.Second)
				continue
			}
		}
	}

	log.Printf("‚ùå All webhook attempts failed for %s -> %s", streamID, status)
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
func restoreActiveStreams() {
	log.Printf("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤...")

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	activeStreams, err := getActiveStreamsFromMainApp()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: %v", err)
		return
	}

	if len(activeStreams) == 0 {
		log.Printf("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
		return
	}

	log.Printf("üîÑ –ù–∞–π–¥–µ–Ω–æ %d –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", len(activeStreams))

	for _, stream := range activeStreams {
		log.Printf("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞: %s (—Å—Ç–∞—Ç—É—Å: %s)", stream.StreamID, stream.StreamStatus)

		// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–Ω–æ–≤–æ
		response := startStream(stream.StreamID)
		if response.Error != "" {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ %s: %s", stream.StreamID, response.Error)
		} else {
			log.Printf("‚úÖ –ü–æ—Ç–æ–∫ %s —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", stream.StreamID)
		}

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
		time.Sleep(1 * time.Second)
	}

	log.Printf("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func getActiveStreamsFromMainApp() ([]StreamInfo, error) {
	mainAppURL := os.Getenv("MAIN_APP_URL")
	if mainAppURL == "" {
		mainAppURL = "http://go-app:8080"
	}

	urls := []string{
		fmt.Sprintf("%s/api/tasks?stream_status=starting", mainAppURL),
		fmt.Sprintf("%s/api/tasks?stream_status=running", mainAppURL),
	}

	var allStreams []StreamInfo

	for _, url := range urls {
		log.Printf("üì° –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: %s", url)

		// ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú RETRY-–õ–û–ì–ò–ö–£
		maxRetries := 5
		client := &http.Client{Timeout: 10 * time.Second}

		for attempt := 1; attempt <= maxRetries; attempt++ {
			resp, err := client.Get(url)
			if err != nil {
				log.Printf("‚ùå –ü–æ–ø—ã—Ç–∫–∞ %d/%d –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è %s: %v", attempt, maxRetries, url, err)
				if attempt < maxRetries {
					time.Sleep(time.Duration(attempt) * 2 * time.Second)
					continue
				}
				break
			}
			defer resp.Body.Close()

			if resp.StatusCode != 200 {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç %s: %d", url, resp.StatusCode)
				if attempt < maxRetries {
					time.Sleep(time.Duration(attempt) * 2 * time.Second)
					continue
				}
				break
			}

			var response TasksResponse
			if err := json.NewDecoder(resp.Body).Decode(&response); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç %s: %v", url, err)
				if attempt < maxRetries {
					time.Sleep(time.Duration(attempt) * 2 * time.Second)
					continue
				}
				break
			}

			log.Printf("üì° –ü–æ–ª—É—á–µ–Ω–æ %d –ø–æ—Ç–æ–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏–∑ %s", len(response.Data), url)
			allStreams = append(allStreams, response.Data...)
			break // –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
		}
	}

	return allStreams, nil
}

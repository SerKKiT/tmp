package handlers

import (
	"encoding/json"
	"log"
	"net/http"

	"my-go-app/internal/application/services"
	"my-go-app/internal/domain/stream"
	"my-go-app/pkg/middleware"
)

// InternalHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Ç–æ–∫–æ–≤.
// –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã, –∞ –Ω–µ –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
//
// –¢–∏–ø–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
//   - Streaming service —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ç–æ–∫–∞
//   - –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª—è—é—Ç —Å—Ç–∞—Ç—É—Å—ã
//   - Batch jobs –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—Ç —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Ç–æ–∫–æ–≤
type InternalHandler struct {
	streamService *services.StreamService
}

type StatusUpdateRequest struct {
	StreamID string `json:"stream_id"`
	Status   string `json:"status"`
}

func NewInternalHandler(streamService *services.StreamService) *InternalHandler {
	return &InternalHandler{
		streamService: streamService,
	}
}

// ‚úÖ –ù–û–í–´–ô ENDPOINT –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
func (h *InternalHandler) HandleStreamStatusUpdate(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req StatusUpdateRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		response := middleware.Response{
			Message: "Invalid request format",
			Error:   err.Error(),
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∏–ø Status
	var newStatus stream.Status
	switch req.Status {
	case "starting":
		newStatus = stream.StatusStarting
	case "running":
		newStatus = stream.StatusRunning
	case "stopped":
		newStatus = stream.StatusStopped
	case "error":
		newStatus = stream.StatusError
	default:
		response := middleware.Response{
			Message: "Invalid status",
			Error:   "Unknown status: " + req.Status,
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}

	log.Printf("üîÑ Internal status update: %s -> %s", req.StreamID, req.Status)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if err := h.streamService.UpdateStreamStatus(r.Context(), req.StreamID, newStatus); err != nil {
		log.Printf("‚ùå Failed to update stream status internally: %v", err)
		response := middleware.Response{
			Message: "Failed to update stream status",
			Error:   err.Error(),
		}
		w.WriteHeader(http.StatusInternalServerError)
		json.NewEncoder(w).Encode(response)
		return
	}

	log.Printf("‚úÖ Stream %s status updated internally to %s", req.StreamID, req.Status)

	response := middleware.Response{
		Message: "Status updated successfully",
		Data: map[string]interface{}{
			"stream_id": req.StreamID,
			"status":    req.Status,
		},
	}
	json.NewEncoder(w).Encode(response)
}

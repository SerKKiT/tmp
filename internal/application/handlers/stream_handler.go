package handlers

import (
	"bytes"
	"encoding/json"
	"io"
	"log"
	"my-go-app/internal/application/services"
	"my-go-app/internal/domain/stream"
	"my-go-app/pkg/config" // ‚úÖ –î–û–ë–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢
	"my-go-app/pkg/middleware"
	"net/http"
	"strconv"
	"strings"
	"time"
)

// StreamHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ HTTP –∑–∞–ø—Ä–æ—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ—Ç–æ–∫–∞–º–∏.
// –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª–Ω—ã–π CRUD (Create, Read, Update, Delete) —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤.
// –¢–∞–∫–∂–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –≤–Ω–µ—à–Ω–∏–º streaming service —á–µ—Ä–µ–∑ HTTP –≤—ã–∑–æ–≤—ã.
type StreamHandler struct {
	streamService *services.StreamService
}

// StreamingResponse - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ streaming service.
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É Go API –∏ –≤–Ω–µ—à–Ω–∏–º streaming —Å–µ—Ä–≤–∏—Å–æ–º.
type StreamingResponse struct {
	Message  string      `json:"message"`
	StreamID string      `json:"stream_id,omitempty"`
	Status   string      `json:"status,omitempty"`
	Data     interface{} `json:"data,omitempty"`
	Error    string      `json:"error,omitempty"`
}

// NewStreamHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ—Ç–æ–∫–æ–≤.
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é handler.
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//
//	streamService - —Å–µ—Ä–≤–∏—Å —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–∞–º–∏
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//
//	*StreamHandler - –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
func NewStreamHandler(streamService *services.StreamService) *StreamHandler {
	return &StreamHandler{
		streamService: streamService,
	}
}

// HandleStreams –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ endpoint /api/tasks
//
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã:
//
//	GET  - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
//	POST - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ request body
//
// GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
//
//	stream_status (query) - —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø–æ—Ç–æ–∫–æ–≤ (starting, running, stopped, error)
//
// POST body (JSON):
//
//	{"name": "stream_name", "stream_id": "unique_id"}
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//
//	GET:  200 + —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–æ–∫–æ–≤ –≤ JSON
//	POST: 201 + –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
//	–û—à–∏–±–∫–∏: 400/500 + –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
func (h *StreamHandler) HandleStreams(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	ctx := r.Context()

	switch r.Method {
	case "GET":
		statusFilter := r.URL.Query().Get("stream_status")

		streams, err := h.streamService.ListStreams(ctx, statusFilter)
		if err != nil {
			response := middleware.Response{
				Message: "Failed to get streams",
				Error:   err.Error(),
			}
			w.WriteHeader(http.StatusInternalServerError)
			json.NewEncoder(w).Encode(response)
			return
		}

		response := middleware.Response{
			Message: "Streams retrieved successfully",
			Data:    streams,
		}
		json.NewEncoder(w).Encode(response)

	case "POST":
		var req services.CreateStreamRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			response := middleware.Response{
				Message: "Invalid request format",
				Error:   err.Error(),
			}
			w.WriteHeader(http.StatusBadRequest)
			json.NewEncoder(w).Encode(response)
			return
		}

		stream, err := h.streamService.CreateStream(ctx, &req)
		if err != nil {
			response := middleware.Response{
				Message: "Failed to create stream",
				Error:   err.Error(),
			}
			w.WriteHeader(http.StatusBadRequest)
			json.NewEncoder(w).Encode(response)
			return
		}

		response := middleware.Response{
			Message: "Stream created successfully",
			Data:    stream,
		}
		w.WriteHeader(http.StatusCreated)
		json.NewEncoder(w).Encode(response)

	default:
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
	}
}

func (h *StreamHandler) HandleStreamByID(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	ctx := r.Context()

	idStr := strings.TrimPrefix(r.URL.Path, "/api/tasks/")
	id, err := strconv.ParseUint(idStr, 10, 32)
	if err != nil {
		response := middleware.Response{
			Message: "Invalid ID",
			Error:   err.Error(),
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}

	switch r.Method {
	case "GET":
		stream, err := h.streamService.GetStreamByID(ctx, uint(id))
		if err != nil {
			response := middleware.Response{
				Message: "Stream not found",
				Error:   err.Error(),
			}
			w.WriteHeader(http.StatusNotFound)
			json.NewEncoder(w).Encode(response)
			return
		}

		response := middleware.Response{
			Message: "Stream found",
			Data:    stream,
		}
		json.NewEncoder(w).Encode(response)

	case "DELETE":
		err := h.streamService.DeleteStream(ctx, uint(id))
		if err != nil {
			response := middleware.Response{
				Message: "Failed to delete stream",
				Error:   err.Error(),
			}
			w.WriteHeader(http.StatusInternalServerError)
			json.NewEncoder(w).Encode(response)
			return
		}

		response := middleware.Response{
			Message: "Stream deleted successfully",
		}
		json.NewEncoder(w).Encode(response)

	default:
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
	}
}

func (h *StreamHandler) HandleStreamControl(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	ctx := r.Context()

	streamID := strings.TrimPrefix(r.URL.Path, "/api/streams/")
	if streamID == "" {
		response := middleware.Response{
			Message: "StreamID is required",
			Error:   "StreamID is required",
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}

	streamEntity, err := h.streamService.GetStreamByStreamID(ctx, streamID)
	if err != nil {
		response := middleware.Response{
			Message: "Stream not found",
			Error:   err.Error(),
		}
		w.WriteHeader(http.StatusNotFound)
		json.NewEncoder(w).Encode(response)
		return
	}

	switch r.Method {
	case "POST":
		var req struct {
			Action string `json:"action"`
		}

		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			response := middleware.Response{
				Message: "Invalid request format",
				Error:   err.Error(),
			}
			w.WriteHeader(http.StatusBadRequest)
			json.NewEncoder(w).Encode(response)
			return
		}

		log.Printf("üé¨ Stream action requested: %s for stream %s", req.Action, streamID)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ streaming service
		streamingResp, err := h.callStreamingService(streamID, req.Action)
		if err != nil {
			log.Printf("‚ùå Failed to communicate with streaming service: %v", err)
			response := middleware.Response{
				Message: "Failed to communicate with streaming service",
				Error:   err.Error(),
			}
			w.WriteHeader(http.StatusInternalServerError)
			json.NewEncoder(w).Encode(response)
			return
		}

		// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê –õ–û–ì–ò–ö–ê: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
		var newStatus stream.Status

		if req.Action == "start" {
			if streamingResp.Error == "" {
				// –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
				newStatus = stream.StatusStarting
				log.Printf("‚úÖ Stream %s starting successfully", streamID)
			} else {
				// –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞
				newStatus = stream.StatusError
				log.Printf("‚ùå Stream %s failed to start: %s", streamID, streamingResp.Error)
			}
		} else if req.Action == "stop" {
			newStatus = stream.StatusStopped
			log.Printf("üõë Stream %s stopped", streamID)
		} else {
			// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
			newStatus = stream.StatusError
			log.Printf("‚ö†Ô∏è Unknown action %s for stream %s", req.Action, streamID)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		if err := h.streamService.UpdateStreamStatus(ctx, streamID, newStatus); err != nil {
			log.Printf("‚ùå Failed to update stream status to %s: %v", newStatus, err)
			// –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
		} else {
			log.Printf("‚úÖ Stream %s status updated to %s", streamID, newStatus)
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
		response := middleware.Response{
			Message: streamingResp.Message,
			Data: map[string]interface{}{
				"stream_id":      streamID,
				"stream_status":  newStatus,
				"action":         req.Action,
				"streaming_data": streamingResp.Data,
			},
		}

		// –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –≤ streaming service, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
		if streamingResp.Error != "" {
			response.Error = streamingResp.Error
			w.WriteHeader(http.StatusInternalServerError)
		}

		json.NewEncoder(w).Encode(response)

	case "GET":
		response := middleware.Response{
			Message: "Stream status retrieved",
			Data:    streamEntity,
		}
		json.NewEncoder(w).Encode(response)

	default:
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
	}
}

func (h *StreamHandler) callStreamingService(streamID, action string) (*StreamingResponse, error) {
	streamingServiceURL := config.GetEnv("STREAMING_SERVICE_URL", "http://streaming-service:8081") + "/api/streams"

	requestBody := map[string]string{
		"stream_id": streamID,
		"action":    action,
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return nil, err
	}

	log.Printf("üì° Calling streaming service: %s with %s", streamingServiceURL, string(jsonData))

	resp, err := http.Post(streamingServiceURL, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		log.Printf("‚ùå HTTP request to streaming service failed: %v", err)
		return nil, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Printf("‚ùå Failed to read response body: %v", err)
		return nil, err
	}

	log.Printf("üì° Streaming service response: %s", string(body))

	var streamingResponse StreamingResponse
	if err := json.Unmarshal(body, &streamingResponse); err != nil {
		log.Printf("‚ùå Failed to parse streaming service response: %v", err)
		return nil, err
	}

	log.Printf("üì° Parsed streaming response: Message=%s, Status=%s, Error=%s",
		streamingResponse.Message, streamingResponse.Status, streamingResponse.Error)

	return &streamingResponse, nil
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: Proxy –¥–ª—è streaming service
func (h *StreamHandler) HandleStreamingServiceProxy(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –ø–æ—Å–ª–µ /api/streaming-proxy/
	proxyPath := strings.TrimPrefix(r.URL.Path, "/api/streaming-proxy")

	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è streaming service
	streamingServiceURL := config.GetEnv("STREAMING_SERVICE_URL", "http://streaming-service:8081")
	targetURL := streamingServiceURL + proxyPath

	log.Printf("üîÑ Proxy request to: %s", targetURL)

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ streaming service
	req, err := http.NewRequest(r.Method, targetURL, r.Body)
	if err != nil {
		http.Error(w, "Failed to create request", http.StatusInternalServerError)
		return
	}

	// –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	for key, values := range r.Header {
		for _, value := range values {
			req.Header.Add(key, value)
		}
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("‚ùå Proxy request failed: %v", err)
		http.Error(w, "Streaming service unavailable", http.StatusBadGateway)
		return
	}
	defer resp.Body.Close()

	// –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
	w.WriteHeader(resp.StatusCode)
	for key, values := range resp.Header {
		for _, value := range values {
			w.Header().Add(key, value)
		}
	}

	// –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
	io.Copy(w, resp.Body)

	log.Printf("‚úÖ Proxy request completed: %d", resp.StatusCode)
}

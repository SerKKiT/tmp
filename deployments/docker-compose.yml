services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    ports:
      - "192.168.3.55:5432:5432"  # Привязка к IP runner
    environment:
      POSTGRES_DB: ${DB_NAME:-goapp}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-mypassword123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-goapp}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  go-app:
    build:
      context: ../    # ✅ Это будет /opt/streamapp в deploy
      dockerfile: Dockerfile
    container_name: go-app
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-mypassword123}
      - DB_NAME=${DB_NAME:-goapp}
      - DB_SSLMODE=${DB_SSLMODE:-disable}
      - STREAMING_SERVICE_URL=${STREAMING_SERVICE_URL:-http://streaming-service:8081}
      - SERVER_IP=${SERVER_IP:-192.168.3.55}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  streaming-service:
    build:
      context: ../    # ✅ Корень проекта
      dockerfile: deployments/Dockerfile.streaming
    container_name: streaming-service
    ports:
      - "8081:8081"
      - "10000-10100:10000-10100/udp"
    environment:
      - SERVER_IP=${SERVER_IP:-192.168.3.55}
    volumes:
      - hls_data:/app/hls
      - stream_logs:/app/logs
    networks:
      - app-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # ✅ Путь к nginx конфигурации
      - ../nginx/ssl/server.crt:/opt/streamapp/server.crt:ro  # ✅ SSL сертификат
      - ../nginx/ssl/server.key:/opt/streamapp/server.key:ro  # ✅ SSL ключ
      - ./hls_output:/opt/streamapp/hls_output:ro   # ✅ HLS файлы
    depends_on:
      - go-app
      - streaming-service
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  hls_data:
  stream_logs:

networks:
  app-network:    # ✅ Исправлен отступ
    driver: bridge
